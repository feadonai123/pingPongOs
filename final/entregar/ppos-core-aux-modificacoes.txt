#include <signal.h>
#include <sys/time.h>

struct sigaction action ;
struct itimerval timer ;

#define TASK_TYPE_SYSTEM 0
#define TASK_TYPE_USER 1
#define INIT_QUANTUM 20

void ticks_handler (int signum)
{
    systemTime++;
    if(taskExec->type == TASK_TYPE_USER){
        taskExec->running_time++;
        if(taskExec->quantum > 0){
            taskExec->quantum--;
        }else{
            task_yield();
        }
    }
}

int task_get_eet(task_t *task){
  if(task == NULL){
    task = taskExec;
  }
  return task->estimate_time;
}

void task_set_eet(task_t *task, int estimate_time){
    if(task == NULL){
        task = taskExec;
    }
    if(task->estimate_time != -1){
        task->running_time += task->estimate_time - estimate_time;
    } else{
        task->estimate_time = estimate_time;
    }
}

int task_get_ret(task_t *task){
    if(task == NULL){
        task = taskExec;
    }
    return task->running_time;
}


void after_ppos_init () {
    // put your customization here
#ifdef DEBUG
    printf("\ninit - AFTER");
#endif
    taskMain->type = TASK_TYPE_SYSTEM;
    taskMain->estimate_time = 9999;
    taskMain->running_time = 0;
    // adciona uma função de callback para o evento SIGALRM
    action.sa_handler = ticks_handler ;
    sigemptyset (&action.sa_mask) ;
    action.sa_flags = 0 ;
    if (sigaction (SIGALRM, &action, 0) < 0)
    {
        perror ("Erro em sigaction: ") ;
        exit (1) ;
    }

    // configura o timer para 1ms
    timer.it_value.tv_usec = 1000;      // primeiro disparo, em micro-segundos
    timer.it_value.tv_sec  = 0;      // primeiro disparo, em segundos
    timer.it_interval.tv_usec = 1000;   // disparos subsequentes, em micro-segundos
    timer.it_interval.tv_sec  = 0;   // disparos subsequentes, em segundos

    if (setitimer (ITIMER_REAL, &timer, 0) < 0)
    {
        perror ("Erro em setitimer: ") ;
        exit (1) ;
    }
}

void after_task_create (task_t *task ) {
    // put your customization here
#ifdef DEBUG
    printf("\ntask_create - AFTER - [%d]", task->id);
#endif
    task->type = TASK_TYPE_USER;
    task->estimate_time = -1;
    task->running_time = 0;
    task->activations = 0;
    task->start_time = systime();
}


void after_task_exit () {
    // put your customization here
#ifdef DEBUG
    printf("\ntask_exit - AFTER- [%d]", taskExec->id);
#endif
    printf("\nTask %d exit: execution time %d ms, processor time %d ms, %d activations\n", taskExec->id, systime() - taskExec->start_time, taskExec->running_time, taskExec->activations);
}


void after_task_switch ( task_t *task ) {
    // put your customization here
#ifdef DEBUG
    printf("\ntask_switch - AFTER - [%d -> %d]", taskExec->id, task->id);
#endif
    task->quantum = INIT_QUANTUM;
    task->activations++;
}


task_t * scheduler() {
    // FCFS scheduler
    if ( readyQueue != NULL ) {
        task_t *taskAux = readyQueue;
        task_t *taskMin = readyQueue;
        do{
            if(taskAux->estimate_time - taskAux->running_time < taskMin->estimate_time - taskMin->running_time){
                taskMin = taskAux;
            }

            taskAux = taskAux->next;
        } while (taskAux != readyQueue);

        return taskMin;
    }
    return NULL;
}